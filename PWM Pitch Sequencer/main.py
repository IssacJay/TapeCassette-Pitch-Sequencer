#OPENING SPLASHSCREEN
import machine
from machine import Pin
from machine import ADC
from machine import UART
import time
import math
import _thread
import ustruct
from rotary import Rotary
from machine import Pin, I2C
from ssd1306 import SSD1306_I2C
import framebuf

#OLED
i2c=I2C(1,sda=Pin(6), scl=Pin(7), freq=400000) #Initiate paramers for the OLED-SSD1036 display
oled = SSD1306_I2C(128, 64, i2c) #Create instance of  OLED-SSD1036 display using the MicroPython OLED-SSD1036 module

#ROTARY ENCODER
rotary = Rotary(18,17,19) #DT (Direction), CK(Clock),SW(Switch)
switch = Pin(16, mode=Pin.IN, pull = Pin.PULL_UP) # Inbuilt switch on the rotary encoder

def Frame_Buf():
    while True:
        #Byte Array of Logo
       LOGO = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t@\x00\x00\x00\x00\x00\x00\xff\xfc\x00\x00\x00\x00\x00\x07\x80\x17\x80\x00\x00\x00\x00\x18\x00\x02\xe0\x00\x00\x00\x000\x00\x00p\x00\x00\x00\x00\xc0\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x01\x80\x00\x00\x08\x00\x00\x00\x00\xc0\x00\x00\x10\x00\x00\x00\x00`\x00\x00\x10\x00\x00\x00\x00`\x00\x00 \x00\x00\x00\x000\x00\x00@\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x80\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x80\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x06\x00\x01\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
       fb = framebuf.FrameBuffer(LOGO,60,60, framebuf.MONO_HLSB) #Create a frame buffer with the logo
       oled.fill(0) #Clear the screen
       for i in range(-128,128): #Loop between -width of screen and screen
           oled.blit(fb,i,0) #Move the logo according to current X coordinate (i)
           b = abs(i) #Absolute value of i (always positive)
           oled.text("Tape~", b, 45) #Move the logo text according to current X absolute coordinate (i)
           oled.show() #Refresh Screen
       exec(open("/menu.py").read()) #Once loop is finished, open the main menu script
       break #Stop execution
                   
#CALL INITIAL FUNCTION            
_thread.start_new_thread(Frame_Buf,()) #use 2nd core to thread the frame buffer